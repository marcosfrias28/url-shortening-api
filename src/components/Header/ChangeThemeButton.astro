<section class="hidden md:flex flex-row justify-end flex-grow basis-0">
  <div class="md:inline-flex items-center md:gap-4 w-24 bg-zinc-300 rounded-xl">
    <label
      aria-label="Dark/light mode button"
      for="peer"
      class="relative cursor-pointer"
      {...Astro.props}
    >
      <input
        id="peer"
        class="m-0 p-0 absolute overflow-hidden w-0 h-0 peer"
        value=""
        type="checkbox"
      />
      <div
        id="themeButton"
        class="bg-[#a5a5a5] w-12 h-12 rounded-xl ring-0 peer duration-500 outline-none bg-gray-500 overflow-hidden after:flex after:items-center after:justify-center before:flex before:items-center before:justify-center after:content-[url('/images/sun.svg')] after:absolute after:h-10 after:w-10 after:top-1/2 after:bg-white/90 after:rounded-xl after:left-1 after:-translate-y-1/2 after:transition-all after:duration-700 peer-checked:after:opacity-0 peer-checked:after:rotate-90 peer-checked:after:-translate-y-full shadow-lg peer-checked:shadow-lg peer-checked:bg-[#383838] before:content-[url('/images/moon.svg')] before:absolute before:bg-[#1d1d1d] before:rounded-xl before:top-[4px] before:right-1 before:translate-y-full before:w-10 before:h-10 before:opacity-0 before:transition-all before:duration-700 peer-checked:before:opacity-100 peer-checked:before:rotate-180 peer-checked:before:translate-y-0"
      >
      </div>
    </label>
    <svg
      id="system"
      class="cursor-pointer"
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="black"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
        d="M3 5a1 1 0 0 1 1 -1h16a1 1 0 0 1 1 1v10a1 1 0 0 1 -1 1h-16a1 1 0 0 1 -1 -1v-10z"
      ></path><path d="M7 20h10"></path><path d="M9 16v4"></path><path
        d="M15 16v4"></path></svg
    >
  </div>
</section>

<script is:inline>
  const darkQuery = window.matchMedia("(prefers-color-scheme: dark)");
  const $themeButton = document.querySelector("#peer");
  const $systemButton = document.querySelector("#system");
  $themeButton.addEventListener("click", checkStatus);
  $systemButton.addEventListener("click", changePreferences);
  darkQuery.addEventListener("change", changePreferences);

  if (
    localStorage.getItem("theme") === "dark" ||
    (!("theme" in localStorage) && darkQuery.matches)
  ) {
    $themeButton.checked = true;
  } else {
    $themeButton.checked = false;
  }

  function changePreferences(e) {
    if (e.target.id === "system") {
      localStorage.removeItem("theme");
    }
    if (darkQuery.matches) {
      document.documentElement.classList.add("dark");
      $themeButton.checked = true;
    } else {
      localStorage.setItem("theme", "light");
      document.documentElement.classList.remove("dark");
      $themeButton.checked = false;
    }
  }

  function checkStatus() {
    if ($themeButton.checked === true) {
      localStorage.setItem("theme", "dark");
      document.documentElement.classList.add("dark");
    } else {
      localStorage.setItem("theme", "light");
      document.documentElement.classList.remove("dark");
      $themeButton.checked = false;
    }
  }
</script>
